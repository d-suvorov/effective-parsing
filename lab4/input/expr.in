ExprParser
ExprLexer
%%
NUMBER double
PLUS
MINUS
MUL
DIV
LPAREN
RPAREN
%%
E double
EPrime double
T double
TPrime double
F double
%%
E -> T EPrime { return attr[0] + attr[1]; }
EPrime -> PLUS T EPrime { return +(attr[1] + attr[2]); }
EPrime -> MINUS T EPrime { return -(attr[1] + attr[2]); }
EPrime -> { return 0; }
T -> F TPrime { return attr[0] * attr[1]; }
TPrime -> MUL F TPrime { return attr[1] * attr[2]; }
TPrime -> DIV F TPrime { return 1.0 / (attr[1] * attr[2]); }
TPrime -> { return 1; }
F -> NUMBER { return attr[0]; }
F -> LPAREN E RPAREN { return attr[1]; }
F -> MINUS F { return -attr[1]; }
%%